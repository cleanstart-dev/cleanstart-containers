version: '3.8'

networks:
  monitoring:
    driver: bridge
  logstash:
    driver: bridge

services:
  # Logstash Instance 1
  logstash-1:
    image: docker.elastic.co/logstash/logstash:8.11.0
    container_name: logstash-multi-1
    restart: unless-stopped
    ports:
      - "9600:9600"  # Logstash API
      - "5000:5000"  # TCP input
    environment:
      - LS_JAVA_OPTS=-Xmx256m -Xms256m
      - XPACK_MONITORING_ENABLED=true
      - NODE_NAME=logstash-1
    volumes:
      - ./logstash/config/logstash-1.yml:/usr/share/logstash/config/logstash.yml:ro
      - ./logstash/pipeline/logstash-1.conf:/usr/share/logstash/pipeline/logstash.conf:ro
      - ./logstash/logs/logstash-1:/usr/share/logstash/logs
    networks:
      - logstash
      - monitoring
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9600/_node/stats"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Logstash Instance 2
  logstash-2:
    image: docker.elastic.co/logstash/logstash:8.11.0
    container_name: logstash-multi-2
    restart: unless-stopped
    ports:
      - "9601:9600"  # Logstash API
      - "5001:5000"  # TCP input
    environment:
      - LS_JAVA_OPTS=-Xmx256m -Xms256m
      - XPACK_MONITORING_ENABLED=true
      - NODE_NAME=logstash-2
    volumes:
      - ./logstash/config/logstash-2.yml:/usr/share/logstash/config/logstash.yml:ro
      - ./logstash/pipeline/logstash-2.conf:/usr/share/logstash/pipeline/logstash.conf:ro
      - ./logstash/logs/logstash-2:/usr/share/logstash/logs
    networks:
      - logstash
      - monitoring
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9600/_node/stats"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Redis for shared queue
  redis:
    image: redis:7-alpine
    container_name: redis-multi
    restart: unless-stopped
    ports:
      - "6379:6379"
    networks:
      - logstash
      - monitoring
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Load Balancer (HAProxy)
  haproxy:
    image: haproxy:2.8-alpine
    container_name: haproxy-multi
    restart: unless-stopped
    ports:
      - "8080:80"  # Web interface
      - "8081:8404"  # Stats
    volumes:
      - ./haproxy/haproxy.cfg:/usr/local/etc/haproxy/haproxy.cfg:ro
    networks:
      - logstash
      - monitoring
    depends_on:
      - logstash-1
      - logstash-2
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8404"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Logstash Exporter for multiple instances
  logstash-exporter:
    image: cleanstart/logstash-exporter:latest
    container_name: logstash-exporter-multi
    restart: unless-stopped
    ports:
      - "9198:9198"
    environment:
      - LOGSTASH_SERVER=http://logstash-1:9600,http://logstash-2:9600
      - LOGSTASH_TIMEOUT=5s
    networks:
      - monitoring
    depends_on:
      - logstash-1
      - logstash-2
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9198/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Sample Data Generator
  log-generator:
    image: python:3.9-alpine
    container_name: log-generator-multi
    restart: unless-stopped
    ports:
      - "8082:8080"
    working_dir: /app
    command: >
      sh -c "pip install flask requests &&
             python3 /app/generate_logs.py"
    volumes:
      - ./log-generator:/app
    networks:
      - logstash
      - monitoring
    depends_on:
      - haproxy
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  logstash_logs_1:
    driver: local
  logstash_logs_2:
    driver: local
