1. Get the application URL by running these commands:
{{- if .Values.ingress.enabled }}
{{- range $host := .Values.ingress.hosts }}
  {{- range .paths }}
  http{{ if $.Values.ingress.tls }}s{{ end }}://{{ $host.host }}{{ .path }}
  {{- end }}
{{- end }}
{{- else if contains "NodePort" .Values.service.type }}
  export NODE_PORT=$(kubectl get --namespace {{ .Release.Namespace }} -o jsonpath="{.spec.ports[0].nodePort}" services {{ include "go-web-app.fullname" . }})
  export NODE_IP=$(kubectl get nodes --namespace {{ .Release.Namespace }} -o jsonpath="{.items[0].status.addresses[0].address}")
  echo http://$NODE_IP:$NODE_PORT
{{- else if contains "LoadBalancer" .Values.service.type }}
     NOTE: It may take a few minutes for the LoadBalancer IP to be available.
           You can watch the status of by running 'kubectl get --namespace {{ .Release.Namespace }} svc -w {{ include "go-web-app.fullname" . }}'
  export SERVICE_IP=$(kubectl get svc --namespace {{ .Release.Namespace }} {{ include "go-web-app.fullname" . }} --template "{{"{{ range (index .status.loadBalancer.ingress 0) }}{{.}}{{ end }}"}}")
  echo http://$SERVICE_IP:{{ .Values.service.port }}
{{- else if contains "ClusterIP" .Values.service.type }}
  export POD_NAME=$(kubectl get pods --namespace {{ .Release.Namespace }} -l "app.kubernetes.io/name={{ include "go-web-app.name" . }},app.kubernetes.io/instance={{ .Release.Name }}" -o jsonpath="{.items[0].metadata.name}")
  export CONTAINER_PORT=$(kubectl get pod --namespace {{ .Release.Namespace }} $POD_NAME -o jsonpath="{.spec.containers[0].ports[0].containerPort}")
  echo "Visit http://127.0.0.1:8080 to use your application"
  kubectl --namespace {{ .Release.Namespace }} port-forward $POD_NAME 8080:$CONTAINER_PORT
{{- end }}

2. CleanStart Image Information:
   - Image: {{ include "go-web-app.image" . }}
   - Publisher: {{ .Values.cleanstart.publisher }}
   - Verified: {{ .Values.cleanstart.imageVerified }}
   - Security Scan: {{ .Values.cleanstart.securityScan }}

3. Application Features:
   - Go Web Application with Gin framework
   - SQLite database with persistent storage
   - REST API endpoints
   - Web interface for user management
   - Health checks enabled

4. API Endpoints:
   - GET /api/users - Get all users
   - POST /api/users - Create new user
   - Web interface available at root path

5. Database:
   - SQLite database stored in persistent volume
   - Volume size: {{ .Values.persistence.size }}
   - Mount path: {{ .Values.persistence.mountPath }}

6. Monitoring:
   {{- if .Values.serviceMonitor.enabled }}
   - ServiceMonitor enabled for Prometheus
   {{- else }}
   - ServiceMonitor disabled (enable in values.yaml)
   {{- end }}

7. Scaling:
   {{- if .Values.autoscaling.enabled }}
   - Horizontal Pod Autoscaler enabled
   - Min replicas: {{ .Values.autoscaling.minReplicas }}
   - Max replicas: {{ .Values.autoscaling.maxReplicas }}
   {{- else }}
   - Horizontal Pod Autoscaler disabled (enable in values.yaml)
   {{- end }}
