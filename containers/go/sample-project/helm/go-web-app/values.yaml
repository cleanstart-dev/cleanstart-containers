# Default values for go-web-app
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

# Global settings
global:
  imageRegistry: ""
  imagePullSecrets: []
  storageClass: ""

# Image configuration
image:
  repository: cleanstart/go
  tag: "latest"
  pullPolicy: Always
  pullSecrets: []

# Image pull secrets
imagePullSecrets: []

# Service account configuration
serviceAccount:
  create: true
  annotations: {}
  name: ""
  automountServiceAccountToken: true

# Pod security context
podSecurityContext:
  runAsNonRoot: true
  runAsUser: 1001
  runAsGroup: 1001
  fsGroup: 1001
  seccompProfile:
    type: RuntimeDefault

# Container security context
securityContext:
  allowPrivilegeEscalation: false
  readOnlyRootFilesystem: false
  runAsNonRoot: true
  runAsUser: 1001
  runAsGroup: 1001
  capabilities:
    drop:
      - ALL

# Deployment configuration
replicaCount: 3

# Pod configuration
podAnnotations:
  prometheus.io/scrape: "true"
  prometheus.io/port: "8080"
  prometheus.io/path: "/metrics"

podLabels: {}

# Service configuration
service:
  type: ClusterIP
  port: 8080
  targetPort: 8080
  protocol: TCP
  name: http
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "8080"
    prometheus.io/path: "/metrics"
  sessionAffinity: None

# Ingress configuration
ingress:
  enabled: false
  className: "nginx"
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    nginx.ingress.kubernetes.io/proxy-body-size: "16m"
    nginx.ingress.kubernetes.io/proxy-connect-timeout: "30"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "30"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "30"
    nginx.ingress.kubernetes.io/rate-limit: "100"
    nginx.ingress.kubernetes.io/rate-limit-window: "1m"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
  hosts:
    - host: go-app.example.com
      paths:
        - path: /
          pathType: Prefix
    - host: api.example.com
      paths:
        - path: /api
          pathType: Prefix
        - path: /health
          pathType: Prefix
        - path: /metrics
          pathType: Prefix
  tls:
    - secretName: go-tls-secret
      hosts:
        - go-app.example.com
        - api.example.com

# Resource configuration
resources:
  limits:
    cpu: 500m
    memory: 512Mi
  requests:
    cpu: 250m
    memory: 256Mi

# Autoscaling configuration
autoscaling:
  enabled: true
  minReplicas: 2
  maxReplicas: 10
  targetCPUUtilizationPercentage: 70
  targetMemoryUtilizationPercentage: 80
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
        - type: Percent
          value: 10
          periodSeconds: 60
        - type: Pods
          value: 2
          periodSeconds: 60
      selectPolicy: Min
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
        - type: Percent
          value: 50
          periodSeconds: 60
        - type: Pods
          value: 4
          periodSeconds: 60
      selectPolicy: Max

# Node selector
nodeSelector: {}

# Tolerations
tolerations: []

# Affinity
affinity:
  podAntiAffinity:
    preferredDuringSchedulingIgnoredDuringExecution:
      - weight: 100
        podAffinityTerm:
          labelSelector:
            matchExpressions:
              - key: app
                operator: In
                values:
                  - go-web-app
          topologyKey: kubernetes.io/hostname

# Environment variables
env:
  # Application Configuration
  GIN_MODE: "release"
  GIN_DEBUG: "false"
  LOG_LEVEL: "INFO"
  
  # Database Configuration
  DB_PATH: "/app/users.db"
  DB_POOL_SIZE: "10"
  DB_POOL_TIMEOUT: "30"
  
  # Application Settings
  MAX_CONTENT_LENGTH: "16777216"  # 16MB
  SESSION_LIFETIME: "3600"  # 1 hour
  
  # Security Settings
  SECRET_KEY: "your-secret-key-here"
  CSRF_ENABLED: "true"
  CSRF_TIME_LIMIT: "3600"
  
  # Monitoring Configuration
  ENABLE_METRICS: "true"
  METRICS_PORT: "8080"
  HEALTH_CHECK_INTERVAL: "30"
  
  # Caching Configuration
  CACHE_TYPE: "memory"
  CACHE_DEFAULT_TIMEOUT: "300"
  
  # API Configuration
  API_RATE_LIMIT: "100"
  API_RATE_LIMIT_WINDOW: "60"
  
  # Logging Configuration
  LOG_FORMAT: "%s - %s - %s - %s"
  LOG_FILE: "/app/logs/app.log"
  LOG_MAX_SIZE: "10485760"  # 10MB
  LOG_BACKUP_COUNT: "5"
  
  # Performance Configuration
  WORKER_THREADS: "4"
  WORKER_CONNECTIONS: "1000"
  KEEPALIVE_TIMEOUT: "65"
  
  # Feature Flags
  ENABLE_DEBUG_ENDPOINTS: "false"
  ENABLE_PROFILING: "false"
  ENABLE_CORS: "true"
  
  # External Services
  EXTERNAL_API_URL: "https://api.example.com"
  EXTERNAL_API_TIMEOUT: "30"
  
  # Application-specific settings
  APP_NAME: "Go K8s App"
  APP_VERSION: "1.0.0"
  APP_DESCRIPTION: "Go application running on Kubernetes"
  
  # Timezone Configuration
  TZ: "UTC"
  
  # Go-specific settings
  GOROOT: "/usr/local/go"
  GOPATH: "/go"
  CGO_ENABLED: "0"
  GOOS: "linux"
  
  # Health Check Configuration
  HEALTH_CHECK_PATH: "/health"
  READINESS_CHECK_PATH: "/ready"
  LIVENESS_CHECK_PATH: "/health"
  
  # Graceful Shutdown Configuration
  GRACEFUL_SHUTDOWN_TIMEOUT: "30"
  SHUTDOWN_HANDLERS_ENABLED: "true"

# Secrets configuration
secrets:
  # Database Configuration
  database:
    url: "sqlite:///app/users.db"
    password: "password123"
  
  # API Keys
  api:
    key: "your-api-key-here"
    jwtSecret: "your-jwt-secret-key"
  
  # External Service Credentials
  external:
    apiKey: "external-api-key"
    apiSecret: "external-api-secret"
  
  # OAuth Credentials
  oauth:
    clientId: "your-oauth-client-id"
    clientSecret: "your-oauth-client-secret"
  
  # Encryption Keys
  encryption:
    key: "your-encryption-key-here"
    signingKey: "your-signing-key-here"
  
  # Third-party Service Keys
  aws:
    accessKey: "your-aws-access-key"
    secretKey: "your-aws-secret-key"
  
  # Monitoring and Logging
  monitoring:
    prometheusToken: "your-prometheus-token"
    grafanaApiKey: "your-grafana-api-key"
  
  # Backup and Storage
  storage:
    backupEncryptionKey: "your-backup-encryption-key"
    accessKey: "your-storage-access-key"
    secretKey: "your-storage-secret-key"
  
  # SSL/TLS Certificates
  ssl:
    cert: "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0t"  # Base64 encoded SSL certificate
    key: "LS0tLS1CRUdJTiBQUklWQVRFIEtFWS0tLS0t"  # Base64 encoded SSL private key
  
  # Application-specific secrets
  app:
    adminPassword: "admin-password123"
    userDefaultPassword: "user-default-pass"
  
  # Feature Flags (sensitive)
  features:
    betaFeaturesEnabled: "true"
    debugMode: "false"
  
  # Rate Limiting
  rateLimit:
    key: "your-rate-limit-key"
  
  # Session Configuration
  session:
    secret: "your-session-secret-key"
  
  # Cache Configuration
  cache:
    password: "your-cache-password"
  
  # Message Queue
  messageQueue:
    rabbitmqPassword: "your-rabbitmq-password"
    kafkaPassword: "your-kafka-password"
  
  # Webhook Secrets
  webhooks:
    secret: "your-webhook-secret"
    githubSecret: "your-github-webhook-secret"
  
  # Analytics and Tracking
  analytics:
    key: "your-analytics-key"
    trackingId: "your-tracking-id"
  
  # Payment Processing
  payment:
    stripeSecretKey: "your-stripe-secret-key"
    paypalClientSecret: "your-paypal-client-secret"
  
  # CDN and Media
  media:
    cdnAccessKey: "your-cdn-access-key"
    storageKey: "your-media-storage-key"
  
  # Notification Services
  notifications:
    pushNotificationKey: "your-push-notification-key"
    smsApiKey: "your-sms-api-key"
  
  # Search and Indexing
  search:
    elasticsearchPassword: "your-elasticsearch-pass"
    solrPassword: "your-solr-password"
  
  # Machine Learning Services
  ml:
    apiKey: "your-ml-api-key"
    aiServiceToken: "your-ai-service-token"
  
  # Compliance and Audit
  compliance:
    auditEncryptionKey: "your-audit-encryption-key"
    complianceToken: "your-compliance-token"

# Health checks configuration
healthCheck:
  livenessProbe:
    httpGet:
      path: /health
      port: 8080
      scheme: HTTP
    initialDelaySeconds: 30
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 3
    successThreshold: 1
  
  readinessProbe:
    httpGet:
      path: /ready
      port: 8080
      scheme: HTTP
    initialDelaySeconds: 5
    periodSeconds: 5
    timeoutSeconds: 3
    failureThreshold: 3
    successThreshold: 1
  
  startupProbe:
    httpGet:
      path: /health
      port: 8080
      scheme: HTTP
    initialDelaySeconds: 10
    periodSeconds: 5
    timeoutSeconds: 3
    failureThreshold: 30
    successThreshold: 1

# Volume configuration
volumes:
  config:
    mountPath: /app/config
    readOnly: true
  
  logs:
    mountPath: /app/logs
  
  tmp:
    mountPath: /tmp
  
  uploads:
    mountPath: /app/uploads

# Persistent volume configuration
persistence:
  enabled: false
  storageClass: ""
  accessMode: ReadWriteOnce
  size: 10Gi
  annotations: {}

# Network policy configuration
networkPolicy:
  enabled: false
  ingress:
    - from:
        - namespaceSelector:
            matchLabels:
              name: default
        - podSelector:
            matchLabels:
              app: nginx-ingress
      ports:
        - protocol: TCP
          port: 8080
  egress:
    - to: []
      ports:
        - protocol: TCP
          port: 53
        - protocol: UDP
          port: 53

# Pod disruption budget
podDisruptionBudget:
  enabled: true
  minAvailable: 1
  maxUnavailable: 1

# Termination grace period
terminationGracePeriodSeconds: 30

# DNS policy
dnsPolicy: ClusterFirst