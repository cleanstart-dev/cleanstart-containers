apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx-load-balancer
  labels:
    app: nginx-load-balancer
    component: loadbalancer
spec:
  replicas: 2
  selector:
    matchLabels:
      app: nginx-load-balancer
  template:
    metadata:
      labels:
        app: nginx-load-balancer
        component: loadbalancer
    spec:
      containers:
      - name: nginx-lb
        image: cleanstart/nginx:latest
        ports:
        - containerPort: 80
          name: http
        volumeMounts:
        - name: nginx-lb-config
          mountPath: /etc/nginx/nginx.conf
          subPath: nginx.conf
          readOnly: true
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "256Mi"
            cpu: "200m"
        livenessProbe:
          httpGet:
            path: /health
            port: 80
          initialDelaySeconds: 10
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /health
            port: 80
          initialDelaySeconds: 5
          periodSeconds: 5
      volumes:
      - name: nginx-lb-config
        configMap:
          name: nginx-lb-config
---
apiVersion: v1
kind: Service
metadata:
  name: nginx-lb-service
  labels:
    app: nginx-load-balancer
spec:
  type: LoadBalancer
  ports:
  - port: 80
    targetPort: 80
    protocol: TCP
    name: http
  selector:
    app: nginx-load-balancer
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: nginx-lb-config
  labels:
    app: nginx-load-balancer
data:
  nginx.conf: |
    user nginx;
    worker_processes auto;
    error_log /var/log/nginx/error.log;
    pid /var/run/nginx.pid;
    
    events {
        worker_connections 1024;
    }
    
    http {
        include /etc/nginx/mime.types;
        default_type application/octet-stream;
        
        # Logging
        log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                        '$status $body_bytes_sent "$http_referer" '
                        '"$http_user_agent" "$http_x_forwarded_for"';
        
        access_log /var/log/nginx/access.log main;
        
        # Upstream backend servers with load balancing
        upstream backend_servers {
            least_conn;
            server backend-1-service:5000 max_fails=3 fail_timeout=30s;
            server backend-2-service:5000 max_fails=3 fail_timeout=30s;
            server backend-3-service:5000 max_fails=3 fail_timeout=30s;
            keepalive 32;
        }
        
        # Main server block
        server {
            listen 80;
            server_name _;
            
            # Health check
            location /health {
                access_log off;
                return 200 "healthy\n";
                add_header Content-Type text/plain;
            }
            
            # Load balanced backend
            location / {
                proxy_pass http://backend_servers;
                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header X-Forwarded-Proto $scheme;
                proxy_connect_timeout 30s;
                proxy_send_timeout 30s;
                proxy_read_timeout 30s;
                proxy_buffering on;
                proxy_buffer_size 4k;
                proxy_buffers 8 4k;
            }
        }
    }
