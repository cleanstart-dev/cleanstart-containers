user nginx;
worker_processes auto;
error_log /var/log/nginx/error.log notice;
pid /var/run/nginx.pid;

events {
    worker_connections 1024;
    use epoll;
    multi_accept on;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    
    # Logging
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for"';
    
    access_log /var/log/nginx/access.log main;
    
    # Performance
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;
    client_max_body_size 16M;
    
    # Gzip compression
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/json
        application/javascript
        application/xml+rss
        application/atom+xml
        image/svg+xml;
    
    # Security headers
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;
    
    # Rate limiting
    limit_req_zone $binary_remote_addr zone=api:10m rate=10r/s;
    
    # Upstream backend servers with load balancing
    upstream backend_servers {
        least_conn;
        server backend-1:5000 max_fails=3 fail_timeout=30s;
        server backend-2:5000 max_fails=3 fail_timeout=30s;
        server backend-3:5000 max_fails=3 fail_timeout=30s;
        keepalive 32;
    }
    
    # Main server block
    server {
        listen 80;
        server_name _;
        
        # Health check endpoint
        location /health {
            access_log off;
            return 200 "nginx-lb healthy\n";
            add_header Content-Type text/plain;
        }
        
        # Metrics endpoint
        location /metrics {
            access_log off;
            return 200 "# Nginx LB metrics\nnginx_up 1\n";
            add_header Content-Type text/plain;
        }
        
        # Load balanced backend
        location / {
            limit_req zone=api burst=20 nodelay;
            proxy_pass http://backend_servers;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_connect_timeout 30s;
            proxy_send_timeout 30s;
            proxy_read_timeout 30s;
            proxy_buffering on;
            proxy_buffer_size 4k;
            proxy_buffers 8 4k;
        }
        
        # Backend status endpoint
        location /backend-status {
            return 200 '<!DOCTYPE html>
<html>
<head>
    <title>Load Balancer Status</title>
    <style>
        body { font-family: Arial, sans-serif; margin: 40px; background: #f5f5f5; }
        .container { background: white; padding: 30px; border-radius: 10px; box-shadow: 0 2px 10px rgba(0,0,0,0.1); }
        .backend { margin: 20px 0; padding: 15px; border-left: 4px solid #007cba; background: #f8f9fa; }
        .endpoint { background: #e3f2fd; padding: 10px; margin: 5px 0; border-radius: 5px; font-family: monospace; }
        .status { color: #4caf50; font-weight: bold; }
    </style>
</head>
<body>
    <div class="container">
        <h1>⚖️ Nginx Load Balancer Status</h1>
        <p class="status">✅ Load balancing across 3 backend services</p>
        
        <div class="backend">
            <h3>Backend Services</h3>
            <div class="endpoint">backend-1:5000</div>
            <div class="endpoint">backend-2:5000</div>
            <div class="endpoint">backend-3:5000</div>
        </div>
        
        <div class="backend">
            <h3>Load Balancing Algorithm</h3>
            <p>Using <strong>least_conn</strong> - distributes requests to the server with the least number of active connections</p>
        </div>
        
        <div class="backend">
            <h3>Health Checks</h3>
            <p>Each backend is monitored with health checks and will be marked as failed after 3 consecutive failures</p>
        </div>
        
        <div class="backend">
            <h3>Test Load Balancing</h3>
            <p>Refresh this page multiple times to see requests being distributed across different backends</p>
        </div>
    </div>
</body>
</html>';
            add_header Content-Type text/html;
        }
    }
}
