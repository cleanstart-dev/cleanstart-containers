apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "python-app.fullname" . }}
  labels:
    {{- include "python-app.labels" . | nindent 4 }}
spec:
  {{- if not .Values.autoscaling.enabled }}
  replicas: {{ .Values.replicaCount }}
  {{- end }}
  selector:
    matchLabels:
      {{- include "python-app.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "python-app.selectorLabels" . | nindent 8 }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "python-app.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      containers:
        - name: {{ .Chart.Name }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
            - name: http
              containerPort: 5000
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /health
              port: http
            initialDelaySeconds: 30
            periodSeconds: 10
          readinessProbe:
            httpGet:
              path: /health
              port: http
            initialDelaySeconds: 5
            periodSeconds: 5
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
          command: ["python3", "-c"]
          args:
            - |
              import http.server
              import socketserver
              import json
              import os
              import sys
              import time
              from datetime import datetime
              
              start_time = datetime.now()
              request_count = 0
              
              class CleanStartHandler(http.server.BaseHTTPRequestHandler):
                  def do_GET(self):
                      global request_count
                      request_count += 1
                      
                      if self.path == '/':
                          self.send_response(200)
                          self.send_header('Content-type', 'text/html')
                          self.send_header('X-Content-Type-Options', 'nosniff')
                          self.send_header('X-Frame-Options', 'DENY')
                          self.end_headers()
                          uptime = str(datetime.now() - start_time).split('.')[0]
                          html = f'''<html><head><title>CleanStart Python Container</title></head>
              <body><h1>CleanStart Secure Python Container</h1>
              <p>Enterprise-grade security demonstration</p>
              <ul><li>Uptime: {uptime}</li><li>Requests: {request_count}</li>
              <li>Python: {sys.version_info.major}.{sys.version_info.minor}</li>
              <li>Security: Non-root (UID {os.getuid()})</li></ul>
              <h3>Features:</h3><ul>
              <li><a href="/health">Health Check</a></li>
              <li><a href="/security">Security Status</a></li>
              <li><a href="/performance">Performance Demo</a></li>
              <li><a href="/system">System Info</a></li></ul></body></html>'''
                          self.wfile.write(html.encode())
              
                      elif self.path == '/health':
                          self.send_response(200)
                          self.send_header('Content-type', 'application/json')
                          self.end_headers()
                          response = {'status': 'healthy', 'uptime': str(datetime.now() - start_time)}
                          self.wfile.write(json.dumps(response).encode())
              
                      elif self.path == '/security':
                          self.send_response(200)
                          self.send_header('Content-type', 'application/json')
                          self.end_headers()
                          response = {'running_as_root': os.getuid() == 0, 'uid': os.getuid(), 'gid': os.getgid(), 'python_version': sys.version, 'timestamp': datetime.now().isoformat()}
                          self.wfile.write(json.dumps(response, indent=2).encode())
              
                      elif self.path == '/performance':
                          self.send_response(200)
                          self.send_header('Content-type', 'application/json')
                          self.end_headers()
                          start = time.time()
                          result = sum(i*i for i in range(100000))
                          duration = time.time() - start
                          response = {'test': 'CPU calculation', 'result': result, 'duration_ms': round(duration * 1000, 2), 'timestamp': datetime.now().isoformat()}
                          self.wfile.write(json.dumps(response, indent=2).encode())
              
                      elif self.path == '/system':
                          self.send_response(200)
                          self.send_header('Content-type', 'application/json')
                          self.end_headers()
                          import platform
                          response = {'platform': platform.system(), 'python_version': sys.version, 'container_id': os.uname().nodename, 'working_dir': os.getcwd(), 'uptime': str(datetime.now() - start_time)}
                          self.wfile.write(json.dumps(response, indent=2).encode())
              
                      else:
                          self.send_response(404)
                          self.send_header('Content-type', 'text/plain')
                          self.end_headers()
                          self.wfile.write(b'Not Found')
              
                  def log_message(self, format, *args):
                      pass
              
              print('CleanStart Python showcase starting on port 5000')
              print(f'Running as UID: {os.getuid()}, GID: {os.getgid()}')
              
              with socketserver.TCPServer(('0.0.0.0', 5000), CleanStartHandler) as httpd:
                  httpd.serve_forever()
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
